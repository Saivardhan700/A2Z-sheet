class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer,Integer> map=new HashMap<>();
        int n = nums.length;
        
        for(int i=0;i<n;i++){
            int y= target - nums[i];

            if( map.containsKey(y) ){
               return new int[]{map.get(y),i};
              }
            map.put(nums[i],i);
            }
        return null;
    }
}

//Two Pointer
class Solution3 {
    public int[] twoSum(int[] nums, int target) {
        // Create array of indices and values
        int[][] numWithIndex = new int[nums.length][2];
        for(int i = 0; i < nums.length; i++) {
            numWithIndex[i] = new int[]{nums[i], i};
        }
        
        // Sort based on values
        Arrays.sort(numWithIndex, (a, b) -> a[0] - b[0]);
        
        int left = 0, right = nums.length - 1;
        
        while(left < right) {
            int sum = numWithIndex[left][0] + numWithIndex[right][0];
            
            if(sum == target) {
                return new int[]{numWithIndex[left][1], numWithIndex[right][1]};
            } else if(sum < target) {
                left++;
            } else {
                right--;
            }
        }
        
        return new int[]{};
    }
}
